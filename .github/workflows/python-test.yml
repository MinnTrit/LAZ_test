name: CI Workflow

on: 
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    test:
        name: Test python code
        #The environment to execute the job
        runs-on: ubuntu-latest
        
        #Initialize the steps to run the tasks
        steps:
            - name: Checkout the code
              uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.8'

            - name: Install Python's Libraries
              run: |
                python -m pip install --upgrade pip
                pip install fuzzywuzzy
                pip install pandas
                pip install playwright
                pip install pytest
                pip install pytest-cov
                playwright install

            - name: Set up environment variables
              run: echo "CHROMIUM_PATH=/home/runner/.cache/ms-playwright/chromium-1129/chrome-linux" >> $GITHUB_ENV

            - name: Install Additional GI Libraries
              run: |
                sudo apt-get update
                sudo apt-get install -y libvpx7 libevent-2.1-7 libopus0 \
                libgstreamer-plugins-base1.0-0 libgstreamer1.0-0 libharfbuzz0b \
                libhyphen0 libmanette-0.2-0 libflite1 libgles2-mesa

            - name: Current directory
              run: pwd

            - name: Run tests
              run: python test_scrapping.py

            - name: Save result artifacts
              uses: actions/upload-artifact@v3
              with:
                name: test-results
                path: result.log
    build:
        name: Build and analyze
        runs-on: ubuntu-latest

        steps:          
          - name: Set up Sonarqube environment
            uses: actions/checkout@v4
            with: 
              fetch-depth: 0
          - uses: sonarsource/sonarqube-scan-action@v2
            with:
              args: >
                -Dsonar.projectKey=Sonarqube-Github
                -Dsonar.projectName=Sonarqube-Github
                -Dsonar.projectVersion=1.0
                -Dsonar.sources=.
            env:
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

          - name: Install Java 17
            uses: actions/setup-java@v3
            with: 
              java-version: '17'
              distribution: 'temurin'
            
          - name: Set up JAVA_HOME
            run: echo "PATH=$PATH:/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64" >> $GITHUB_PATH
            
          - name: Download Sonarqube Scanner
            run: |
              scannerPath="${{ github.workspace }}"
              echo "The scanner path is $scannerPath"
              wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.2856-linux.zip 
              unzip sonar-scanner-cli-5.0.1.2856-linux.zip -d $scannerPath
              echo "Items in the current directory"
              ls -l "$scannerPath/sonar-scanner-4.8.0.2856-linux/bin"

          - name: Set up the SonarQube executable path
            run: |
              echo "${{ github.workspace }}/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH
              source ~/.bashrc

          - name: Run Sonarqube Scanner
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            run: |
              /home/runner/work/LAZ_test/LAZ_test/sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner \
                -Dsonar.projectKey=Sonarqube-Github \
                -Dsonar.projectName=Sonarqube-Github \
                -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
                -Dsonar.python.coverage.reportPath=coverage.xml \
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}

