name: CI Workflow

on: 
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    test:
        name: Test Python Code
        #The environment to execute the job
        runs-on: ubuntu-latest
        
        #Initialize the steps to run the tasks
        steps:
            - name: Checkout the code
              uses: actions/checkout@v3

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.8'

            - name: Install Python's Libraries
              run: |
                python -m pip install --upgrade pip
                pip install fuzzywuzzy
                pip install pandas
                pip install playwright
                pip install pytest
                pip install pytest-cov
                playwright install
                pip install openpyxl

            - name: Set up environment variables
              run: echo "CHROMIUM_PATH=/home/runner/.cache/ms-playwright/chromium-1129/chrome-linux" >> $GITHUB_ENV

            - name: Set up Python Path
              run: echo "PYTHONPATH=${{ github.workspace }}/src" >> $GITHUB_ENV

            - name: Install Additional GI Libraries
              run: |
                sudo apt-get update
                sudo apt-get install -y libvpx7 libevent-2.1-7 libopus0 \
                libgstreamer-plugins-base1.0-0 libgstreamer1.0-0 libharfbuzz0b \
                libhyphen0 libmanette-0.2-0 libflite1 libgles2-mesa

            - name: Current directory
              run: pwd

            - name: Run tests
              run: |
                coverage run -m pytest

            - name: Generate the coverage report
              run: |
                coverage xml -o ${{ github.workspace }}/coverage.xml

            - name: Save result artifacts
              uses: actions/upload-artifact@v3
              with:
                name: coverage-result
                path: ${{ github.workspace }}/coverage.xml

    analyze:
        name: Analyze Through SonarQube
        runs-on: ubuntu-latest
        needs: test

        steps:        
          - name: Check out code
            uses: actions/checkout@v3

          - name: Download Coverage Result Artifact
            uses: actions/download-artifact@v3
            with:
              name: coverage-result
          
          - name: List out the root directory
            run: 
              ls -l ${{ github.workspace }}

          - name: Set up and run SonarQube Scanner
            env:
              GITHUB_TOKEN: ${{ github.token }}
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            uses: SonarSource/sonarcloud-github-action@v3
            with:
              args: >
                -Dsonar.projectKey=Sonarqube-Github
                -Dsonar.projectName=Sonarqube-Github
                -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
                -Dsonar.python.coverage.reportPaths=coverage.xml
                -Dsonar.token=${{ secrets.SONAR_TOKEN }}

    build:
      name: Build the Python code
      runs-on: ubuntu-latest
      needs: analyze

      steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build the docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/laz_test:latest


